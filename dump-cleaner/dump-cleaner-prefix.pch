//
//  dump-cleaner-prefix.pch
//  dump-cleaner
//
//  Created by Tanner on 3/20/16.
//  Copyright Â© 2016 Tanner Bennett. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "dump-cleaner-constants.h"
#import "NSString+Regex.h"
#import "NSArray+Transform.h"
#import "NSFileManager+SubdirectoryContents.h"
#import "NSString+Replacement.h"
#import "DCProgressBar.h"
#import "NSScanner+Helper.h"
#import "NSScanner+ObjectiveC.h"


#define DCAssert(value) if (!(value)) { NSLog( @"Assertion failed: "#value ); return NO; }

#define DCAssertEqual(a, b) DCAssert((a) == b)
#define DCAssertLessThan(a, b) DCAssert((a) < b)
#define DCAssertGreaterThan(a, b) DCAssert((a) > b)
#define DCAssertNonZero(a) DCAssert(a != 0)
#define DCAssertTrue(a) DCAssert(a)
#define DCAssertFalse(a) DCAssert((a) == NO)

#define DCAssertEqualObjects(a, b) DCAssert([a isEqual:b])
#define DCAssertNotNil(a) DCAssert((a) != nil)
#define DCAssertNil(a) DCAssert((a) == nil)

#define DCParseFlagsSetLast(flags, flag) memset(&flags, 0, sizeof(flags)); flags.flag = 1

#define DCLog(message) printf("%s\n", message.UTF8String)

#define DCTabbedFormat(...) [@"\t" stringByAppendingString:[NSString stringWithFormat:__VA_ARGS__]]
#define DCTabbedMessage(message) [@"\t" stringByAppendingString:message]

#define DCExitOnError(error) if (error) { DCLog(DCTabbedFormat(@"%@:%@\t%@", @__FILE__, @__LINE__, error.localizedDescription)); exit(1); }
#define DCExitWithFormat(...) DCLog(DCTabbedFormat(__VA_ARGS__)); exit(1)
#define DCExitWithMessage(message) DCLog(DCTabbedMessage(message)); exit(1)
#define DCWriteError(error) if (error) { DCLog(DCTabbedFormat(@"%@:%@\t%@", @__FILE__, @__LINE__, error.localizedDescription)); }
#define DCWriteFormat(...) DCLog(DCTabbedFormat(__VA_ARGS__))
#define DCWriteMessage(message) DCLog(DCTabbedMessage(message))

#define Format(...) [NSString stringWithFormat:__VA_ARGS__]


// Scanner stuff

#define StaticArray(name, ...) nil; { static dispatch_once_t onceToken; dispatch_once(&onceToken, ^{ name = @[__VA_ARGS__]; }); }

#define ScanPush() NSInteger start = self.scanLocation
#define ScanPop() self.scanLocation = start
#define ScanAssert(cond) if (!(cond)) { return NO; }
#define ScanAssertPop(cond) if (!(cond)) { self.scanLocation = start; return NO; }
#define ScanVariableAssertPop(cond) if (!(cond)) { self.scanLocation = start; return NO; }

// Helper macros for building a string from multiple scans.
#define ScanBuilderInit() NSMutableString *__scanned = [NSMutableString string]
#define ScanBuilderWrite(output) if (output) { *output = __scanned; }
#define ScanAppendFormat(scan, format) ({ NSString *__tmp = nil; BOOL r = [scan:&__tmp]; if (r){[__scanned appendFormat:format, __tmp];} r; })
#define ScanAppend(scan) ({ NSString *__tmp = nil; BOOL r = [scan:&__tmp]; if(r){[__scanned appendString:__tmp];} r; })
#define ScanAppend_(scan) ScanAppendFormat(scan, @"%@ ")

#define NSMutableStringOptionalAppend(str, optional) if (optional) { [str appendFormat:@"%@ ", optional]; }
